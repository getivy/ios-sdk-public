// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GetivySDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
@_exported import GetivySDK
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController, traitCollection: UIKit.UITraitCollection) -> UIKit.UIModalPresentationStyle
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class Getivy : ObjectiveC.NSObject {
  @objc public static let shared: GetivySDK.Getivy
  @objc final public func initializeHandler(configuration: GetivySDK.GetivyConfiguration, handlerResult: @escaping GetivySDK.HandlerCompletion)
  @objc final public func initializeHandler(configuration: GetivySDK.GetivyConfiguration, type: GetivySDK.SDKFlowType, handlerResult: @escaping GetivySDK.HandlerCompletion)
  @objc deinit
}
@objc public protocol Details {
  @objc var referenceId: Swift.String? { get }
  @objc var dataSessionId: Swift.String? { get }
  @objc var checkoutSessionId: Swift.String? { get }
}
extension UIKit.UIFont {
  public static func ivy_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle = Bundle(for: GetivyConfiguration.self))
}
public enum GetivyError : Swift.Error {
  case invalidListBanksListResponse
  case invalidSearchBanksListResponse
  case serverResponseWithNoData
  case invalidURL
  case invalidGetSessionDetailsResponse
  case invalidGetCheckoutDetailsResponse
  case couldNotConstructFullUrlForEnvironment
  case failedToEncodeRequest
  case couldNotLoadViewFromStoryboard
  case flowNotSuccessful
  case featureWantedExternalBrowser
  case newTabUrlCanNotBeOpened
  public static func == (a: GetivySDK.GetivyError, b: GetivySDK.GetivyError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias HandlerCompletion = ((any GetivySDK.UIHandler)?, (any GetivySDK.SDKError)?) -> Swift.Void
@objc public enum SDKFlowType : Swift.Int {
  case data = 1, checkout
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias DismissalClosure = (UIKit.UIViewController) -> Swift.Void
public typealias ViewControllerClosure = (UIKit.UIViewController) -> Swift.Void
@objc public protocol UIHandler {
  @objc func openUI(viewController: UIKit.UIViewController)
  @objc func openUI(presentationCosure: (UIKit.UIViewController) -> Swift.Void, dismissalClosure: @escaping GetivySDK.DismissalClosure)
}
public typealias SuccessCallback = (_ result: any GetivySDK.Details) -> Swift.Void
public typealias ErrorCallback = (_ error: (any GetivySDK.SDKError)?) -> Swift.Void
@objc @objcMembers public class GetivyConfiguration : ObjectiveC.NSObject {
  @objc final public let environment: Swift.String
  @objc public var dataSessionId: Swift.String
  @objc public var checkoutId: Swift.String
  @objc public var onSuccess: GetivySDK.SuccessCallback
  @objc public var onError: GetivySDK.ErrorCallback
  @objc public init(dataSessionId: Swift.String, environment: Swift.String, onSuccess: @escaping GetivySDK.SuccessCallback, onError: @escaping GetivySDK.ErrorCallback)
  @objc public init(checkoutId: Swift.String, environment: Swift.String, onSuccess: @escaping GetivySDK.SuccessCallback, onError: @escaping GetivySDK.ErrorCallback)
  @objc deinit
}
@objc public protocol SDKError {
  @objc var code: Swift.String { get }
  @objc var message: Swift.String { get }
}
extension GetivySDK.GetivyError : Swift.Equatable {}
extension GetivySDK.GetivyError : Swift.Hashable {}
extension GetivySDK.SDKFlowType : Swift.Equatable {}
extension GetivySDK.SDKFlowType : Swift.Hashable {}
extension GetivySDK.SDKFlowType : Swift.RawRepresentable {}
